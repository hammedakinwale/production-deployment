name: CI/CD

on:
  push:
    branches:
      - main

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run basic check
        run: |
          python -c "import fastapi; import uvicorn; print('FastAPI App Ready')"

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install flake8
        run: pip install flake8

      - name: Lint code
        run: flake8 app/

  push:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set IMAGE_TAG
        run: echo "IMAGE=${{ steps.login-ecr.outputs.registry }}/fastapi-app:${{ github.run_id }}" >> $GITHUB_ENV

      - name: Replace placeholders in Dockerfile
        env:
          IMAGE: ${{ env.IMAGE }}
          PORT: ${{ secrets.PORT }}
          APIPORT: ${{ secrets.APIPORT }}
          KUBE_USER: ${{ secrets.KUBE_USER }}
        run: |
          sed -i'' \
            -e "s|IMAGE|$IMAGE|g" \
            -e "s|PORT|$PORT|g" \
            -e "s|APIPORT|$APIPORT|g" \
            -e "s|KUBE_USER|$KUBE_USER|g" \
            Dockerfile

      - name: Build and Push Docker image to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.IMAGE }}

  deploy:
    runs-on: ubuntu-latest
    needs: push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up Kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Replace placeholders in manifests
        env:
          IMAGE: ${{ env.IMAGE }}
          PORT: ${{ secrets.PORT }}
          APIPORT: ${{ secrets.APIPORT }}
          KUBE_SECRET: ${{ secrets.KUBE_SECRET }}
          KUBE_USER: ${{ secrets.KUBE_USER }}
        run: |
          mkdir -p patched
          find . -type f \( -name "*.yaml" -o -name "*.yml" -o -name "*.json" -o -name "Dockerfile" \) | while read file; do
            echo "Patching $file"
            cp "$file" "patched/$(basename "$file")"
            sed -i'' \
              -e "s|IMAGE|$IMAGE|g" \
              -e "s|PORT|$PORT|g" \
              -e "s|APIPORT|$APIPORT|g" \
              -e "s|KUBE_SECRET|$KUBE_SECRET|g" \
              -e "s|KUBE_USER|$KUBE_USER|g" \
              "patched/$(basename "$file")"
          done

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f patched/